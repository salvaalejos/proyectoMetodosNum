/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import java.awt.BorderLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.matheclipse.core.eval.ExprEvaluator;
import org.matheclipse.core.interfaces.IExpr;


/**
 *
 * @author hfyh
 */
public class MetodoNewton extends javax.swing.JFrame {

    /**
     * Creates new form MetodoBiseccion
     */
    private String funcion;
    private double xo;
    private double tol;
    private ExprEvaluator evaluator;
    
    public MetodoNewton() {
        this.evaluator = new ExprEvaluator();
        initComponents();
    }
    
    public MetodoNewton(String funcion) {
        this.evaluator = new ExprEvaluator();
        this.funcion = funcion;
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Metodo de Newton - Rhapson");
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgBiseccion = new javax.swing.JPanel();
        panelGrafica = new javax.swing.JPanel();
        panelLimits = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fieldTolerancy = new javax.swing.JTextField();
        fieldXo = new javax.swing.JTextField();
        btnConfirmar = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldFunction = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lblFuncion = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fieldDerivada = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaIteraciones = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        bgBiseccion.setBackground(new java.awt.Color(205, 245, 253));
        bgBiseccion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout panelGraficaLayout = new javax.swing.GroupLayout(panelGrafica);
        panelGrafica.setLayout(panelGraficaLayout);
        panelGraficaLayout.setHorizontalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        panelGraficaLayout.setVerticalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        bgBiseccion.add(panelGrafica, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 340));

        panelLimits.setBackground(new java.awt.Color(160, 233, 255));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Xo:");

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tolerancia:");

        fieldTolerancy.setBackground(new java.awt.Color(160, 233, 255));
        fieldTolerancy.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        fieldTolerancy.setForeground(new java.awt.Color(0, 0, 0));
        fieldTolerancy.setText("0.001");
        fieldTolerancy.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
        fieldTolerancy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldTolerancyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldTolerancyFocusLost(evt);
            }
        });
        fieldTolerancy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldTolerancyKeyTyped(evt);
            }
        });

        fieldXo.setBackground(new java.awt.Color(160, 233, 255));
        fieldXo.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        fieldXo.setForeground(new java.awt.Color(0, 0, 0));
        fieldXo.setText("5");
        fieldXo.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
        fieldXo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldXoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldXoFocusLost(evt);
            }
        });
        fieldXo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldXoKeyTyped(evt);
            }
        });

        btnConfirmar.setBackground(new java.awt.Color(0, 169, 255));
        btnConfirmar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(254, 174, 187));
        btnBack.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(51, 51, 51));
        btnBack.setText("Volver");
        btnBack.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Función derivada:");

        fieldFunction.setEditable(false);
        fieldFunction.setBackground(new java.awt.Color(160, 233, 255));
        fieldFunction.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        fieldFunction.setForeground(new java.awt.Color(0, 0, 0));
        fieldFunction.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
        fieldFunction.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFunctionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldFunctionFocusLost(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 169, 255));

        lblFuncion.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        lblFuncion.setForeground(new java.awt.Color(255, 255, 255));
        lblFuncion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFuncion.setText("Newton - Rhapson");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFuncion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFuncion, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Función:");

        fieldDerivada.setEditable(false);
        fieldDerivada.setBackground(new java.awt.Color(160, 233, 255));
        fieldDerivada.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        fieldDerivada.setForeground(new java.awt.Color(0, 0, 0));
        fieldDerivada.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
        fieldDerivada.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldDerivadaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldDerivadaFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panelLimitsLayout = new javax.swing.GroupLayout(panelLimits);
        panelLimits.setLayout(panelLimitsLayout);
        panelLimitsLayout.setHorizontalGroup(
            panelLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelLimitsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConfirmar, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldXo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(fieldFunction, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldTolerancy)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldDerivada, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelLimitsLayout.setVerticalGroup(
            panelLimitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLimitsLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldXo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldTolerancy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addGap(3, 3, 3)
                .addComponent(fieldDerivada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        bgBiseccion.add(panelLimits, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 200, 340));

        jScrollPane1.setBackground(new java.awt.Color(205, 245, 253));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        tablaIteraciones.setBackground(new java.awt.Color(205, 245, 253));
        tablaIteraciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaIteraciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# i", "Xo", "f(Xo)", "f´(Xo)", "Xi", "ER"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaIteraciones.setGridColor(new java.awt.Color(0, 169, 255));
        jScrollPane1.setViewportView(tablaIteraciones);

        bgBiseccion.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 740, 230));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgBiseccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgBiseccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearAll(){
        fieldXo.setText("");
        fieldTolerancy.setText("");
        fieldFunction.setText("");
        lblFuncion.setText("");
        panelGrafica.removeAll();
        panelGrafica.revalidate();
        panelGrafica.repaint();
    }
    

    private String derivarFuncion(String funcion) {
        String derivadaStr;
        
        try {
            // Derivada de la función respecto a x
            IExpr derivada = this.evaluator.eval("D(" + funcion + ", x)");
            derivadaStr = derivada.toString();

            // Reemplazos para asegurar compatibilidad con exp4j
            derivadaStr = derivadaStr.replace("E", "e"); // Para manejar 'E' como 'e'
            derivadaStr = derivadaStr.replace("Log", "log"); // Para manejar logaritmos
        } catch (Exception e) {
            // Manejar excepciones de manera apropiada
            JOptionPane.showMessageDialog(null,"Error"+e.getMessage());
            return null;
        }

        return derivadaStr;
    }
    
    private double evaluarFuncion(String funcion, double x) {
        try {
            Expression expresion = new ExpressionBuilder(funcion)
                    .variable("x")
                    .variable("e")
                    .build()
                    .setVariable("x", x)
                    .setVariable("e", Math.E);
            return expresion.evaluate();
        } catch (Exception e) {
            return Double.NaN; 
        }
    }
    
    private void desarrollarNewtonRaphson(String funcion, String derivada, double x0, double tolerancia) {
        double errorAbsoluto;
        int iteracionesMaximas = 100;
        double x = x0;
        double fx, fpx;

        DefaultTableModel modelo = (DefaultTableModel) tablaIteraciones.getModel();
        modelo.setRowCount(0); // Limpiar las filas actuales

        // Crear un formateador para mostrar solo 4 decimales
        DecimalFormat df = new DecimalFormat("#.####");

        for (int i = 0; i < iteracionesMaximas; i++) {
            fx = evaluarFuncion(funcion, x); // Evaluar F(x)
            fpx = evaluarFuncion(derivada, x); // Evaluar F'(x)
            // Calcular nuevo valor de x
            double xNuevo = x - fx / fpx;

            // Calcular el error relativo
            errorAbsoluto = Math.abs(xNuevo - x);

            // Agregar fila a la tabla
            modelo.addRow(new Object[]{
                i + 1, // Iteración
                df.format(x), // Valor de x
                df.format(fx), // F(x)
                df.format(fpx), // F'(x)
                df.format(xNuevo), // Nuevo valor de x
                df.format(errorAbsoluto) // Valor absoluto de F(x)
            });

            // Preparar para la próxima iteración
            x = xNuevo;

            // Verificar si el error es menor que la tolerancia
            if (errorAbsoluto < tolerancia) {
                break;
            }
        }
    }
    
    private void graficarFuncion(String funcion, double a, double b, JPanel panel) {
        XYSeries series = new XYSeries("f(x)");

        for (double x = a; x <= b; x += 0.1) {
            double y = evaluarFuncion(funcion, x);
            if (!Double.isNaN(y)) {
                series.add(x, y);
            }
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        JFreeChart chart = ChartFactory.createXYLineChart(
                "Gráfica de la Función",
                "x",
                "f(x)",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false);

        panel.removeAll();
        panel.setLayout(new BorderLayout());
        panel.add(new ChartPanel(chart), BorderLayout.CENTER);
        
        panel.revalidate();
        panel.repaint();
        
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new ObtenerFuncion(3).setVisible(true);
        clearAll();
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        // TODO add your handling code here:
        if(fieldXo.getText().isEmpty()){
            fieldXo.setText("0");
        }
        if(fieldTolerancy.getText().isEmpty()){
            fieldTolerancy.setText("0.001");
        }
        this.xo = Double.parseDouble(fieldXo.getText());
        this.tol = Double.parseDouble(fieldTolerancy.getText());
        String derivada = derivarFuncion(this.funcion);
        desarrollarNewtonRaphson(funcion, derivada, xo, tol);
        graficarFuncion(funcion, -10, 10, panelGrafica);
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void fieldTolerancyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldTolerancyFocusLost
        // TODO add your handling code here:
        fieldTolerancy.setBackground(new Color(160,233,255));
    }//GEN-LAST:event_fieldTolerancyFocusLost

    private void fieldTolerancyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldTolerancyFocusGained
        // TODO add your handling code here:
        fieldTolerancy.setBackground(new Color(205,245,253));
    }//GEN-LAST:event_fieldTolerancyFocusGained

    private void fieldXoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldXoFocusLost
        // TODO add your handling code here:
        fieldXo.setBackground(new Color(160,233,255));
    }//GEN-LAST:event_fieldXoFocusLost

    private void fieldXoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldXoFocusGained
        // TODO add your handling code here:
        fieldXo.setBackground(new Color(205,245,253));
    }//GEN-LAST:event_fieldXoFocusGained

    private void fieldXoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldXoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            evt.consume();
        }
    }//GEN-LAST:event_fieldXoKeyTyped

    private void fieldFunctionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFunctionFocusGained
        // TODO add your handling code here:
        fieldFunction.setBackground(new Color(205,245,253));
    }//GEN-LAST:event_fieldFunctionFocusGained

    private void fieldFunctionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFunctionFocusLost
        // TODO add your handling code here:
        fieldFunction.setBackground(new Color(160,233,255));
    }//GEN-LAST:event_fieldFunctionFocusLost

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        fieldFunction.setText(this.funcion);
        fieldDerivada.setText(derivarFuncion(this.funcion));
    }//GEN-LAST:event_formWindowOpened

    private void fieldDerivadaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldDerivadaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldDerivadaFocusGained

    private void fieldDerivadaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldDerivadaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldDerivadaFocusLost

    private void fieldTolerancyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldTolerancyKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            evt.consume();
        }
    }//GEN-LAST:event_fieldTolerancyKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MetodoBiseccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MetodoBiseccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MetodoBiseccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MetodoBiseccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MetodoNewton().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgBiseccion;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JTextField fieldDerivada;
    private javax.swing.JTextField fieldFunction;
    private javax.swing.JTextField fieldTolerancy;
    private javax.swing.JTextField fieldXo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFuncion;
    private javax.swing.JPanel panelGrafica;
    private javax.swing.JPanel panelLimits;
    private javax.swing.JTable tablaIteraciones;
    // End of variables declaration//GEN-END:variables
}
